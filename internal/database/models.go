// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type FriendshipStatus string

const (
	FriendshipStatusPending  FriendshipStatus = "pending"
	FriendshipStatusAccepted FriendshipStatus = "accepted"
	FriendshipStatusBlocked  FriendshipStatus = "blocked"
)

func (e *FriendshipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FriendshipStatus(s)
	case string:
		*e = FriendshipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FriendshipStatus: %T", src)
	}
	return nil
}

type NullFriendshipStatus struct {
	FriendshipStatus FriendshipStatus `json:"friendship_status"`
	Valid            bool             `json:"valid"` // Valid is true if FriendshipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFriendshipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FriendshipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FriendshipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFriendshipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FriendshipStatus), nil
}

type PlaylistVisibility string

const (
	PlaylistVisibilityPublic  PlaylistVisibility = "public"
	PlaylistVisibilityFriends PlaylistVisibility = "friends"
	PlaylistVisibilityPrivate PlaylistVisibility = "private"
)

func (e *PlaylistVisibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlaylistVisibility(s)
	case string:
		*e = PlaylistVisibility(s)
	default:
		return fmt.Errorf("unsupported scan type for PlaylistVisibility: %T", src)
	}
	return nil
}

type NullPlaylistVisibility struct {
	PlaylistVisibility PlaylistVisibility `json:"playlist_visibility"`
	Valid              bool               `json:"valid"` // Valid is true if PlaylistVisibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlaylistVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.PlaylistVisibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlaylistVisibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlaylistVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlaylistVisibility), nil
}

type Role string

const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Friendship struct {
	UserAID     uuid.UUID        `json:"user_a_id"`
	UserBID     uuid.UUID        `json:"user_b_id"`
	RequesterID uuid.UUID        `json:"requester_id"`
	Status      FriendshipStatus `json:"status"`
	RequestedAt pgtype.Timestamp `json:"requested_at"`
	RespondedAt pgtype.Timestamp `json:"responded_at"`
}

type MonthlyPlaylist struct {
	ID         uuid.UUID          `json:"id"`
	UserID     uuid.UUID          `json:"user_id"`
	Tracks     [][]byte           `json:"tracks"`
	Year       int16              `json:"year"`
	Month      int16              `json:"month"`
	Name       string             `json:"name"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	Visibility PlaylistVisibility `json:"visibility"`
}

type PrivateKey struct {
	Kid   int32  `json:"kid"`
	Value string `json:"value"`
}

type SpotifyToken struct {
	UserID       string `json:"user_id"`
	AccessToken  string `json:"access_token"`
	TokenType    string `json:"token_type"`
	Scope        string `json:"scope"`
	RefreshToken string `json:"refresh_token"`
}

type User struct {
	ID               uuid.UUID        `json:"id"`
	DisplayName      pgtype.Text      `json:"display_name"`
	Username         pgtype.Text      `json:"username"`
	Email            string           `json:"email"`
	RegisteredAt     pgtype.Timestamp `json:"registered_at"`
	Role             Role             `json:"role"`
	SpotifyUserID    string           `json:"spotify_user_id"`
	SpotifyUserData  []byte           `json:"spotify_user_data"`
	CreatedAt        pgtype.Timestamp `json:"created_at"`
	RefreshToken     uuid.UUID        `json:"refresh_token"`
	RefreshExpiresAt pgtype.Timestamp `json:"refresh_expires_at"`
}
